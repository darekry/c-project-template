# Define the compilers
CC := clang-18
CXX := clang++-18

# Common flags
FLAGS := -Wall -Wextra -O3 -march=native -g $(shell sdl2-config --cflags)

# C and C++ specific flags
CFLAGS := $(FLAGS)
CXXFLAGS := -std=c++20 $(FLAGS)

# Enable LTO
#LTO_FLAGS := -flto

# Library flags
LFLAGS := $(shell sdl2-config --libs) -lSDL2_image -lSDL2_ttf $(LTO_FLAGS)

# Directories
OUTPUT := output
SRC := src
INCLUDE := include
LIB := lib

# Main executable name
MAIN := main.exe

# Directories to exclude
EXCLUDE_DIRS ?= exclude_dir1 exclude_dir2

# Find all source, include, and lib directories
SOURCEDIRS := $(filter-out $(addprefix $(SRC)/,$(EXCLUDE_DIRS)), $(shell find $(SRC) -type d))
INCLUDEDIRS := $(shell find $(INCLUDE) -type d)
LIBDIRS := $(shell find $(LIB) -type d)

# Include and library paths
INCLUDES := $(patsubst %,-I%, $(INCLUDEDIRS:%/=%))
LIBS := $(patsubst %,-L%, $(LIBDIRS:%/=%))

# Source and object files
CSOURCES := $(wildcard $(patsubst %,%/*.c, $(SOURCEDIRS)))
CPPSOURCES := $(wildcard $(patsubst %,%/*.cpp, $(SOURCEDIRS)))
COBJECTS := $(patsubst $(SRC)/%.c,$(OUTPUT)/%.o,$(CSOURCES))
CPPOBJECTS := $(patsubst $(SRC)/%.cpp,$(OUTPUT)/%.o,$(CPPSOURCES))

# Dependency files
CDEPS := $(patsubst $(SRC)/%.c,$(OUTPUT)/%.d,$(CSOURCES))
CPPDEPS := $(patsubst $(SRC)/%.cpp,$(OUTPUT)/%.d,$(CPPSOURCES))

# Output main executable
OUTPUTMAIN := $(OUTPUT)/$(MAIN)

# Unity build file
UNITY_BUILD_FILE := $(OUTPUT)/unity_build.cpp
UNITY_OBJECT := $(OUTPUT)/unity_build.o
UNITY_EXEC := $(OUTPUT)/unity_main.exe

# Default target
all: $(OUTPUT) $(MAIN)
	@echo Executing 'all' complete!

# Create output directory
$(OUTPUT):
	mkdir -p $(OUTPUT)

# Link the main executable
$(MAIN): $(COBJECTS) $(CPPOBJECTS)
	$(CXX) $(CXXFLAGS) $(LTO_FLAGS) $(INCLUDES) -o $(OUTPUTMAIN) $(COBJECTS) $(CPPOBJECTS) $(LFLAGS) $(LIBS)

# Include dependency files
-include $(CDEPS)
-include $(CPPDEPS)

# Rule for compiling C source files
$(OUTPUT)/%.o: $(SRC)/%.c
	mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(LTO_FLAGS) $(INCLUDES) -c -MMD $< -o $@

# Rule for compiling C++ source files
$(OUTPUT)/%.o: $(SRC)/%.cpp
	mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) $(LTO_FLAGS) $(INCLUDES) -c -MMD $< -o $@

# Clean target
.PHONY: clean
clean:
	rm -rf $(OUTPUT)
	@echo Cleanup complete!

# Run target
.PHONY: run
run: all
	./$(OUTPUTMAIN)
	@echo Executing 'run' complete!

# Debug target
.PHONY: debug
debug: CFLAGS += -DDEBUG
debug: all
	gdb $(OUTPUTMAIN)

# Generate compile_commands.json using intercept-build
.PHONY: compile_commands
compile_commands:
	rm -f compile_commands.json
	intercept-build --override-compiler make all
	mv compile_commands.json $(OUTPUT)/compile_commands.json
	@echo Generated 'compile_commands.json' complete!

# Unity build target
$(UNITY_BUILD_FILE): $(CPPSOURCES)
	@echo "Generating unity build file: $@"
	@echo "// Unity build file generated by Makefile" > $@
	@for file in $^; do echo "#include \"../$$file\"" >> $@; done
$(UNITY_OBJECT): $(UNITY_BUILD_FILE)
	$(CXX) $(CXXFLAGS) $(LTO_FLAGS) $(INCLUDES) -c -MMD $< -o $@

$(UNITY_EXEC): $(UNITY_OBJECT)
	$(CXX) $(CXXFLAGS) $(LTO_FLAGS) $(INCLUDES) -o $@ $< $(LFLAGS) $(LIBS)

.PHONY: unity
unity: $(OUTPUT) $(UNITY_EXEC)
	@echo Unity build complete!

.PHONY: run_unity
run_unity: unity
	./$(UNITY_EXEC)
	@echo Executing 'run_unity' complete!
